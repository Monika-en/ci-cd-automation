pipeline {
    parameters {
        string(name: 'PROJECT_REPO', description: 'GitHub repository URL (e.g., https://github.com/your-username/your-repo)')
		string(name: 'REPO_BRANCH', defaultValue: 'main', description: 'Repository branch (e.g., main)')
		
    }

    agent { label 'ec2-linux' }

    environment {
        DOCKER_HUB_CREDENTIALS = 'docker-hub-credentials'
        DOCKER_IMAGE_NAME = "mencheva/${env.JOB_BASE_NAME}"
        CUSTOM_IMAGE_TAG = "${DOCKER_IMAGE_NAME}:${env.BUILD_NUMBER}"
    }

    stages {
        stage('Checkout') {
            steps {
                // Clone the GitHub repository specified as a parameter
                checkout([$class: 'GitSCM', branches: [[name: "*/${params.REPO_BRANCH}"]], userRemoteConfigs: [[url: params.PROJECT_REPO, credentialsId: 'monika-en']]])
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
					def temp = CUSTOM_IMAGE_TAG.toLowerCase().replaceAll("_", "-");
                    CUSTOM_IMAGE_TAG = temp
                    // Build the Docker image from the Dockerfile
                    docker.build(CUSTOM_IMAGE_TAG, "-f Dockerfile .")		
                }
            }
        }
		
		stage('Push Docker Image') {
			when {
				anyOf {
				 expression { params.REPO_BRANCH == 'main' }
				}
			}
			steps {
				script {
					// Log in to Docker Hub
					docker.withRegistry('https://registry.hub.docker.com', DOCKER_HUB_CREDENTIALS) {
						// Push the image to Docker Hub
						docker.image(CUSTOM_IMAGE_TAG).push()
					}
				}
			}
		}

        stage('Cleanup') {
            steps {
                // Remove the local Docker image (optional)
                script {
                    sh """docker rmi ${CUSTOM_IMAGE_TAG}"""
					sh """docker rmi registry.hub.docker.com/${CUSTOM_IMAGE_TAG}"""
                }
            }
        }
    }
	post { 
		success {  
			mail bcc: '', body: "Project: ${env.JOB_NAME}<br>Build Number: ${env.BUILD_NUMBER} <br> Build URL: ${env.BUILD_URL}", cc: '', charset: 'UTF-8', from: '', mimeType: 'text/html', replyTo: '', subject: "BUILD SUCCESSFUL: ${env.JOB_NAME}", to: "jenkins@cw.com";  
		}  
		failure {  
			mail bcc: '', body: "Project: ${env.JOB_NAME}<br>Build Number: ${env.BUILD_NUMBER} <br> Build URL: ${env.BUILD_URL}", cc: '', charset: 'UTF-8', from: '', mimeType: 'text/html', replyTo: '', subject: "BUILD FAILED: ${env.JOB_NAME}", to: "jenkins@cw.com";  
		} 
	}  
}
